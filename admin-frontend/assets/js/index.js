var ACCOUNTS_URL = 'http://192.168.99.100:10206';
var ADMIN_URL = 'http://192.168.99.100:10201';

var ALPHANUMERIC = 'ABCEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890';

var app = new Vue({
  el : '#app',
  data : {
    message : 'foo',
    err_messages : '',
    user_id : '',
    password : '',
    autogenpass : false,
    query_name : '',
    query_email : '',
    query_dob : '',
    query_gender : '',
    query_channelgroup : '',
    query_channelchannel : ''
  },
  computed : {
    loggedIn : function(){
      return this.user_id && this.password;
    }
  },
  methods : {
    login : function(event){
      $('#loginmodal').modal('close');
      this.user_id = $("#adminid").val();
      $("#adminid").val('');
      this.password = $("#password").val();
      $("#password").val('');
      Cookies.set('credentials', JSON.stringify({
        id : this.user_id,
        password : this.password
      }));
    },
    logout : function(event){
      this.user_id = '';
      this.password = '';
      Cookies.remove("credentials");
    },
    new_err : function(err){
      this.err_messages += err + '\n';
      $('.err_box').scrollTop = $('.err_box').scrollHeight;
    },
    isEmptyStr : function(str){
      return !str.replace(/\s/g, '').length ? true : false;
    },
    addsingleuser : function(event){
      console.log($('#user-username').val());
      var user_data = {
        id : $('#userid').val(),
        dob : $('#dob').val(),
        name : $('#username').val(),
        username : $('#user-username').val(),
        email : $('#email').val(),
        gender : $('input[name=gender]').val()
      };
      if(this.autogenpass){
        user_data.password = ""
        for(var i = 0; i < 8; i++)
          user_data.password += ALPHANUMERIC.charAt(Math.floor(Math.random() * ALPHANUMERIC.length));
      }else{
        user_data.password = $('#user-password').val();
      }
      this.$http.post(ADMIN_URL + '/user', user_data, {
        headers : {
          Authorization : 'Basic ' + btoa(this.user_id + ':' + this.password)
        },
        emulateJSON : true
      }).then(
        function(res){
          this.new_err("Successfully added user");
          if(this.autogenpass)
            this.new_err("Autogenerated password is " + user_data.password);
          $('#addsingleuser')[0].reset();
        },
        function(res){
          this.new_err("Err: " + res.body.message);
          $('#addsingleuser')[0].reset();
        }
      );
    },
    addmultipleusers : function(event){
      if($('#userfile').prop('files')){
        var reader = new FileReader();
        reader.onload = function(e){
          var counter = 0;
          var lines = reader.result.split('\n');
          lines.forEach(function(line){
            if (!this.isEmptyStr(line)) {
              counter++;
              var user_data = {}
              var values = line.split(',');
              if(values.length >= 6){
                if(!this.isEmptyStr(values[0])){
                  user_data.id = values[0];
                }else{
                  this.new_err("#" + counter + ": Empty ID field.");
                  return;
                }
                if(!this.isEmptyStr(values[1])){
                  user_data.name = values[1];
                }else{
                  this.new_err("#" + counter + ": Empty name field.");
                  return;
                }
                if(!this.isEmptyStr(values[2])){
                  user_data.email = values[2];
                }else{
                  this.new_err("#" + counter + ": Empty email field.");
                  return;
                }
                if(!this.isEmptyStr(values[3])){
                  user_data.password = values[3];
                }else{
                  this.new_err("#" + counter + ": Empty password field, autogenerating.");
                  user_data.password = "";
                  for(var i = 0; i < 8; i++)
                    user_data.password += ALPHANUMERIC.charAt(Math.floor(Math.random() * ALPHANUMERIC.length));
                }
                if(!this.isEmptyStr(values[4])){
                  if(values[4] == 'm' || values[4] == 'M' || values[4] == 'f' || values[4] == 'F'){
                    user_data.gender = values[4];
                  }else{
                    this.new_err("#" + counter + ": Invalid gender " + values[4] + ". Please use m or f.");
                    return;
                  }
                }else{
                  this.new_err("#" + counter + ": Empty gender field.");
                  return;
                }
                if(!this.isEmptyStr(values[5])){
                  user_data.dob = values[5];
                }else{
                  this.new_err("#" + counter + ": Empty DOB field.");
                  return;
                }
                this.$http.post(ADMIN_URL + '/user', user_data, {
                  headers : {
                    Authorization : 'Basic ' + btoa(this.user_id + ':' + this.password)
                  },
                  emulateJSON : true
                }).then(
                  function(res){
                    this.new_err('#' + counter + ": Successfully added user");
                    if(this.isEmptyStr(values[3]))
                      this.new_err("Autogenerated password is " + user_data.password);
                    $('#addmultipleusers')[0].reset();
                  },
                  function(res){
                    this.new_err("Err: " + res.body.message);
                    $('#addmultipleusers')[0].reset();
                  }
                );
              }else{
                this.new_err("#" + counter + ": Not enough fields")
              }
            }
          }.bind(this));
        }.bind(this);
        reader.readAsText($('#userfile').prop('files')[0], 'UTF-8');
      }else{
        this.new_err("No file in input");
      }
    },
    queryuser : function(event){
      var userid = $('#queryuserid').val();
      if(userid){
        this.$http.get(ADMIN_URL + '/user/' + userid).then(
          function(res){
            var user = res.body.user;
            this.query_name = user.name;
            this.query_email = user.email;
            this.query_dob = user.dob;
            $('#query_dob').pickadate('picker').set('select', user.dob, { format: 'yyyy-mm-dd' });
            this.query_gender = user.gender;
          }, function(res){
            this.new_err(res.body.message);
        }).bind(this);
      }else{
        this.new_err("No id in field");
      }
    },
    updateuser : function(event){
      var user_data = {
        name :  this.query_name,
        email : this.query_email,
        password : $("#query_user-password").val(),
        dob : this.query_dob,
        gender : this.query_gender,
      };
      this.$http.post(ADMIN_URL + '/user/' + $('#queryuserid').val(), user_data, {
        headers : {
          Authorization : 'Basic ' + btoa(this.user_id + ':' + this.password)
        },
        emulateJSON : true
      }).then(
        function(res){
          this.new_err("Successfully modified user");
          this.clearquery(null);
        },
        function(res){
          this.new_err("Err: " + res.body.message);
        }
      );
    },
    deleteuser : function(event){
      var userid = $('#queryuserid').val();
      if(userid){
        this.$http.delete(ADMIN_URL + '/user/' + userid, {
          headers : {
            Authorization : 'Basic ' + this.user_id + ':' + this.password
          }
        }).then(
          function(res){
            this.new_err("Successfully deleted user.");
            this.clearquery(null);
          }, function(res){
            this.new_err(res.message);
        }).bind(this);
      }else{
        this.new_err("No id in field");
      }
    },
    clearquery : function(event){
      this.query_name = '';
      this.query_email = '';
      this.query_dob = '';
      $('#query_dob').pickadate('picker').clear();
      this.query_gender = '';
    },
    updateusergroup : function(event){
      this.$http.post(ADMIN_URL + '/channel/user', {
        user : $('#queryuserid').val(),
        group : this.query_channelgroup,
        channel : this.query_channelchannel
      }, {
        headers : {
          Authorization : 'Basic ' + btoa(this.user_id + ':' + this.password)
        },
        emulateJSON : true
      }).then(
        function(res){
          this.new_err("Successfully added to channel");
          this.query_channelgroup = '';
          this.query_channelchannel = '';
        },
        function(res){
          this.new_err("Err: " + res.body.message);
        }
      );
    }
  },
  mounted : function(){
    $('#loginmodal').modal();
    $(".button-collapse").sideNav({
      closeOnClick : true
    });
    $('ul.tabs').tabs();
    var today = new Date();
    $('.datepicker').pickadate({
      format : 'yyyy-mm-dd',
      max : new Date(today.getFullYear(), today.getMonth()+1, today.getDate()),
      selectMonths: true, // Creates a dropdown to control month
      selectYears: 25, // Creates a dropdown of 15 years to control year,
      today: 'Today',
      clear: 'Clear',
      close: 'Ok',
      closeOnSelect: true // Close upon selecting a date,
    });
    if(Cookies.get('credentials')){
      var credentials = JSON.parse(Cookies.get('credentials'));
      this.user_id = credentials.id;
      this.password = credentials.password;
    }
  }
});
